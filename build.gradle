buildscript {
	repositories {
		mavenCentral()
		//maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.2.0'
	}
}

repositories {
	mavenCentral()
	//maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

ext.junitPlatformVersion = '1.2.0'
ext.junitJupiterVersion = '5.2.0'
ext.moduleName = 'net.jqwik'

apply plugin: 'java'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'maven'
apply plugin: 'signing'

group = 'net.jqwik'
version = '0.8.15-SNAPSHOT'

jar {
	baseName = 'jqwik'
	version = '0.8.15-SNAPSHOT'
	manifest {
		attributes('Automatic-Module-Name': moduleName)
	}
}

task javadocApi(type: Javadoc) {
	source = file('./src/main/java')
	failOnError = false
	destinationDir = file('./docs/javadoc')
	include '**/api/**'
}

task javadocJar(type: Jar) {
	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	sign configurations.archives
}

def isSnapshot = project.version.contains('SNAPSHOT')
def signArtifacts = !isSnapshot

uploadArchives {

	dependsOn check

	repositories {
		mavenDeployer {

			if (signArtifacts) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}

			def ossrhUsername = project.hasProperty('ossrhUsername') ? project.ossrhUsername : ''
			def ossrhPassword = project.hasProperty('ossrhPassword') ? project.ossrhPassword : ''

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name 'jqwik'
				packaging 'jar'
				description 'jqwik - Property-based testing for the JVM'
				url 'http://jqwik.net'

				scm {
					connection 'scm:git:git://github.com/jlink/jqwik.git'
					developerConnection 'scm:git:git://github.com/jlink/jqwik.git'
					url 'https://github.com/jlink/jqwik'
				}

				licenses {
					license {
						name 'Eclipse Public License - v 2.0'
						url 'http://www.eclipse.org/legal/epl-v20.html'
					}
				}

				developers {
					developer {
						id 'jlink'
						name 'Johannes Link'
						email 'business@johanneslink.net'
					}
				}
			}
		}
	}
}

compileTestJava {
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
	options.compilerArgs += '-parameters'
	options.encoding = 'UTF-8'
}

junitPlatform {
	//	platformVersion "${junitPlatformVersion}"
	filters {
		engines {
			include "jqwik"
		}
		packages {
			// include 'examples.packageWithFailings'
			exclude 'examples'
		}
		includeClassNamePattern '.*Properties'
		includeClassNamePattern '.*Tests?'
		includeClassNamePattern '.*Examples?'
	}
	// Only use platform tests
	enableStandardTestTask false
	details org.junit.platform.console.options.Details.SUMMARY
}

dependencies {
	compile("org.junit.platform:junit-platform-engine:${junitPlatformVersion}")
	compile("org.junit.platform:junit-platform-commons:${junitPlatformVersion}")
	compile("org.apiguardian:apiguardian-api:1.0.0")

	testCompile("org.mockito:mockito-core:2.18.0")
	testCompile("org.assertj:assertj-core:3.9.1")
	testCompile("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")

	// Only needed to check interferences between Jupiter and jqwik
	testCompile("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")

	testCompile "com.tngtech.archunit:archunit:0.8.2"

}

wrapper {
	description = 'Generates gradlew[.bat] scripts'
	gradleVersion = '4.8.1'
}
